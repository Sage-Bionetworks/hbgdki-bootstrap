#!/usr/bin/env python

"""Rally manager."""

import sys
import json
import logging

from kirallymanager import manager
from kirallymanager import config
import synapseclient

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

def createSprint(syn, args):
    config = json.load(open(args.config))
    manager.createSprint(syn=syn,
                         rallyNumber=args.rallyNumber,
                         sprintLetter=args.sprintLetter,
                         sprintTitle=args.sprintTitle,
                         config=config)

def createRally(syn, args):
    config = json.load(open(args.config))
    manager.createRally(syn=syn,
                        rallyNumber=args.rallyNumber,
                        config=config)

def getRallies(syn, args):
    logger.info("Getting rallies.")
    if not args.adminProjectId:
        config = json.load(open(args.config))
        adminProjectId = config.get("rallyAdminProjectId", None)
    else:
        adminProjectId = args.adminProjectId

    df = manager.getRallies(syn=syn,
                              rallyAdminProjectId=adminProjectId)
    df.to_csv(sys.stdout)

def getSprints(syn, args):
    if not args.adminProjectId:
        config = json.load(open(args.config))
        adminProjectId = config.get("rallyAdminProjectId", None)
    else:
        adminProjectId = args.adminProjectId

    df = manager.getSprints(syn=syn,
                            rallyAdminProjectId=adminProjectId,
                            rallyNumber=args.rallyNumber)
    
    df.to_csv(sys.stdout)

def main():
    import argparse
    import synapseclient
    parser = argparse.ArgumentParser()

    parser.add_argument('--config', type=str, default=None,
                        help="Path to KI rallies configuration file")
    parser.add_argument('--adminProjectId', type=str, default=None,
                        help="Synapse ID of the root project for administration")
    parser.add_argument('--synapseConfig', type=str, default=synapseclient.client.CONFIG_FILE,
                        help="Path to Synapse configuration file")

    subparsers = parser.add_subparsers(help='sub-command help')

    parser_create_rally = subparsers.add_parser('create-rally', help='Create rally.')
    parser_create_rally.add_argument('rallyNumber', type=int, help="The rally number.")
    parser_create_rally.set_defaults(func=createRally)

    
    parser_create_sprint = subparsers.add_parser('create-sprint', help='Create sprint.')
    parser_create_sprint.add_argument('rallyNumber', type=int, help="The rally number.")
    parser_create_sprint.add_argument('sprintLetter', type=str, help="The sprint letter.")
    parser_create_sprint.add_argument('--sprintTitle', type=str, default=None, help='The sprint title [default: %(default)s')
    parser_create_sprint.set_defaults(func=createSprint)
    
    parser_get_rallies = subparsers.add_parser('get-rallies', help='Get rallies.')
    parser_get_rallies.set_defaults(func=getRallies)
    
    parser_get_sprints = subparsers.add_parser('get-sprints', help='Get sprints.')
    parser_get_sprints.add_argument('--rallyNumber', type=int,
                                    help="The rally number [default: %(default)s].", default=None)
    parser_get_sprints.set_defaults(func=getSprints)

    args = parser.parse_args()

    syn = synapseclient.Synapse(configPath=args.synapseConfig)
    syn.login(silent=True)

    args.func(syn, args)

if __name__ == "__main__":
    main()
